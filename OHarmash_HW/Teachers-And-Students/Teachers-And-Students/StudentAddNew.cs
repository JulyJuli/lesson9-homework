using System;

namespace Teachers_And_Students
{
    internal class StudentAddNew : StudentNamesRange
    {
        static Random random = new Random();


        //Add AutoGenerated stundt
        internal static void Generate()
        {
            Console.Clear();

            var randomName = random.Next(0, 4).ToString();
            var age = random.Next(16, 50);
            Enum.TryParse(randomName.ToString(), out Names name);

            UpdateDictionary(name.ToString(), age);
        }


        //Ask user for input name and age
        internal static void Interactive()
        {
            Console.Clear();

            Console.WriteLine("Set Name of student:");
            var name = Console.ReadLine();

            Console.WriteLine("Set {0} Age. Age should be in range {1} - {2}.", name,StudentType._minAge, StudentType._maxAge);
            var ageString = Console.ReadLine();
            int.TryParse(ageString, out var age);

            UpdateDictionary(name, age);
        }


        //Write changes to Dictionary
        static void UpdateDictionary(string name, int age)
        {
            var id = Guid.NewGuid().ToString();
            
            var newStudent = new StudentType();
            newStudent.ID = id;
            newStudent.Name = name;
            newStudent.Age = age;
            
            if (Groups.Teachers.Assistant.Count < Groups.Limits.AssistantLimit)
            {
                Groups.Teachers.Assistant.Add(key: newStudent.ID, value: newStudent);
            }
            else if (Groups.Teachers.Lecturer.Count < Groups.Limits.LecturerLimit)
            {
                Groups.Teachers.Lecturer.Add(key: newStudent.ID, value: newStudent);
            }
            else if (Groups.Teachers.Docent.Count < Groups.Limits.DocentLimit)
            {
                Groups.Teachers.Docent.Add(key: newStudent.ID, value: newStudent);
            }
            else
            {
                PrintInfo.GroupOverloaded();
            }
        }
    }
}
